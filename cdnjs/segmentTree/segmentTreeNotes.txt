used when we have to  perform Range and Update query at the same time

1) When required output in range - means in a array what is the sum for index 2 to 7 or index 3 to 8
2) when array is getting update randomely
ex : arr = [1,2,5,4,7,9,10]
     arr[2] = 10
     arr[4] = 15
     and simultaneously we want answer for some range as mentioned in point 1


arr = [1,2,5,4,7,9,10]
1st case:
when update query is more and range query is less
ex. update : arr[2] = 15
    range : give the sum between range 1 to 4
    so in this case update take O(1) time
    but in worst case range take O(n) time (sum for all array item)

2nd case:
when update query is less and range query is more:

we can use one more array to store cumulative some for every index

arr = [1,2,5,4,7,9,10]
dp = [1,3,8,12,19,28,38]
dp[0] = some of (0,0)
dp[1] = some of (0,1)
dp[2] = some of (0,2)
.
.
.
dp[6] = some of (0,6)

range query : 2 4
              L R
	     ans = dp[4] - dp[1]
	           (0,4)    (0,1)

range query take O(1) time

Update query:
arr[2] = 10
then from index 2 to 6 we have to update every indexc
in worst case it will take O(n) time


3rd Case :
when range and update query is almost equal
- in this case we can't use above approches
- we have to use segment Tree
    segment tree perform both the query in O(logn) time (segmentTreetimecomplexityPic)
    All the leaf node store actual value of array and internal node store answer for different range (SegmentTreeStructurePIc)
    Space: 4*N approx (segmentTreeSizePic)
    Hight of segment tree is log(N)
